""""""""""""""""""""""""""
" Vim Configuration File "
""""""""""""""""""""""""""

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => General
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Ensure vi compatbility is turned off
set nocompatible

" Get rid of startup screen
set shortmess+=I

" Set how many lines of history to remember
set history=100

" Use UTF-8 character encoding
set encoding=utf-8

" Maintain file attributes
set backupcopy=yes

" Automatically re-read file if is changed from the outside
set autoread

" Enable filetype plugins
filetype plugin on

" Define *.md files as markdown filetype
autocmd BufRead,BufNewFile *.md set filetype=markdown


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => VIM user interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" In terminal change cursor to I-Beam in insert mode
if &term =~ "xterm"
    let &t_SI = "\e[5 q"
    let &t_EI = "\e[2 q"
endif

" Set the nubmer of context lines above and below the cursor
set scrolloff=7

" Break lines without breaking words
set linebreak

"Always show current position
set ruler

" Configure backspace so it acts as it should act
set backspace=eol,start,indent
set whichwrap+=<,>,h,l

" Configure commmand completion
set wildmenu
set wildignore+=*~,*.swp,*.tmp
set wildignore+=.DS_Store

" Set search options
set incsearch
set hlsearch
set ignorecase
set smartcase

" Don't redraw while executing macros
set lazyredraw

" Show matching brace when cursor is over a brace
set showmatch
set matchtime=2

" Remove netrw banner
let g:netrw_banner = 0


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax on

" Set Theme
:silent! colorscheme flattened_dark


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set indentation
filetype indent on
set autoindent

autocmd Filetype python
    \ setlocal expandtab tabstop=4 softtabstop=4 shiftwidth=4

" Set tab and eol display characters
set listchars=tab:‣\ ,eol:¬


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Moving around, tabs, windows and buffers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 1 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" Remember info about open buffers on close
:set viminfo^=%


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Status line
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Always show the status line
set laststatus=2

" Hide default mode indicator
set noshowmode

" Set terminal timeout length to help with airline
set ttimeoutlen=50

" For airline replace line percent with total number of lines
let g:airline_powerline_fonts = 1
let g:airline_section_z = '%-10(ln %l/%L%) %-6(col %c%)'
let g:airline_skip_empty_sections = 1
let g:airline_extensions = ['branch', 'tagbar', 'whitespace']

" Quick Fix status line
autocmd Filetype qf
    \ let w:airline_disabled = 1 |
    \ setlocal statusline=%t%=%(Total:\ %L\ %)


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => IDE
" """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set NERDTree options
let NERDTreeMinimalUI = 1
let NERDTreeIgnore = ['\.pyc$']

" Set Tagbar options
let g:tagbar_compact = 1

" Set Syntastic options
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_enable_signs = 1
let g:syntastic_enable_balloons = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0
let g:syntastic_mode_map = {"mode": "passive"}
let g:syntastic_python_checkers = ['flake8', 'pylint']


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Key mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map colon
nnoremap ; :
nnoremap : ;

" Make search results appear in the middle of the screen
nnoremap n nzz
nnoremap N Nzz

" Switch flattended themes
nnoremap <F5> :colorscheme flattened_dark<CR>
nnoremap <F6> :colorscheme flattened_light<CR>

" Define a custom map leader
let mapleader = ","
let g:mapleader = ","

" Fast saving and quiting
nnoremap <leader>w :w<CR>
nnoremap <leader>q :q<CR>
nnoremap <leader>x :wq<CR>

" Toggle line numbers
nnoremap <silent><leader>n :set invnumber<CR>

" Trailing white space
nnoremap <leader>st /\s\+$/<CR>
nnoremap <leader>rt :%s/\s\+$//e<Bar>noh<CR>

" Toggle highlighting on/off and show current value
nnoremap <silent><leader>hl :set hlsearch! hlsearch?<CR>

" Toggle `set list`
nnoremap <silent><leader>l :set list!<CR>

" Toggle and untoggle spell checking
nnoremap <leader>cs :setlocal spell!<CR>

" Toggle IDE windows
nnoremap <silent><leader>[ :NERDTreeToggle<CR>
nnoremap <silent><leader>] :TagbarToggle<CR>

" Syntastic mappings:
nnoremap <leader>sc :SyntasticToggleMode<Bar>SyntasticCheck<BAR>set nu<CR>
nnoremap <leader>se :Errors<CR>
nnoremap <leader>sr :SyntasticToggleMode<Bar>SyntasticReset<CR>

" Location list navigation
nnoremap <leader>lc :lclose<CR>
nnoremap <leader>ln :lnext<CR>
nnoremap <leader>lp :lprev<CR>
